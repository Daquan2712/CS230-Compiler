

/*
   NOTES ON USING THIS FILE:
      (1) Store in a convenient directory.
      (2) At the command line, type "javacc Parser.jj"
      (3) At the command line, type "javac Parser.java"
      (4) To run, type "java Parser <inputfilename>".
      (5) This file should be used to create the AST and its string representation. If you want to have code generation, use CodeGenerator.java instead
   It's easy to leave out step 3! The file Parser.java is
   automatically generated by javacc, but is *not* automatically
   compiled by it!
   NB: The *name* of the file Parser.java comes from the name of
   the *class* Parser in this file. Even if you change the name
   of this file, unless you change the name of the Parser class below,
   javacc will still generate a file entitled Parser.java.
 */

PARSER_BEGIN(Parser)

//This part of the code is just plain java.
//The "Parser" class is an executable class with a main method.
//It creates a Parser object named "parser" and invokes its "Input()" method.
//The Input() method is defined in the grammar as a "nonterminal symbol."

import java.io.*;
import java.util.*;

public class Parser {

  public static void main(String args[]) throws ParseException, FileNotFoundException {
    Parser parser = new Parser(new FileInputStream (args[0]));
    HashSet<String> st = new HashSet<String>();
    SymbolTable table = new SymbolTable(st);
    BinaryExpression parsedTree = parser.Input(table);
    System.out.println(parsedTree.toString());
    table.Print();
  }
}

PARSER_END(Parser)

/*  Specification of tokens */

//Here we specify the whitespace that is skipped.
SKIP :
{
  " "
  | "\t"
  | "\n"
  | "\r"
}

//Here the token classes are defined along
//with the explicit lexemes.
TOKEN :
{
   <addop: "+" | "-" | "||" >
 | <keyw: "void"|"main">
 | <keywIf: "if">
 | <keywElse: "else">
 | <keywLoop: "while">
 | <type: "int"|"bool">
 | <identifier: ["a"-"z"](["a"-"z"])*(["0"-"9"])* | ["a"-"z"]((["a"-"z"])*(["A"-"Z"])*(["0"-"9"])*)* | ["A"-"Z"](["A"-"Z"])*(["0"-"9"])* | ["A"-"Z"]((["A"-"Z"])*(["a"-"z"])*(["0"-"9"])*)*> //ask again so many cases of an identifier can be
 | <num: ["0"-"9"](["0"-"9"])*>
 | <negop: "!">
 | <relop: "=="|"!="|"<"|"<="|">"|">=">
 | <assignop: "=">
 | <mulop: "*"|"/"|"%"|"&&">
 | <begin: "{">
 | <end: "}">
 | <openparen: "(">
 | <closeparen: ")">
 | <semicolon: ";">
 | <comma: ",">
}

/* Specification of Language */

//The Input() symbol is just a wrapper for the Program() symbol.
BinaryExpression Input(SymbolTable table) :
{BinaryExpression result; }
{
  result = Program(table) <EOF>
  {return result;}
}

//Program() is the legit start symbol for this grammar. At this point,
//we just regard it as a string of tokens, as specified above. The
//statements in brackets are executed when the tokens are
//recognized.
//Rule: program -> void main() <block>
BinaryExpression Program(SymbolTable table) :
{Token t; BinaryExpression res;}
{   
    t = <keyw> //return type; only void for now
    t = <keyw> //main
    t = <openparen> 
    t = <closeparen> 
    t = <begin> res = Block(table)
    {return res;}
    
}

//Rule: <block> -> { <declarations> <optional_statements>?}
BinaryExpression Block(SymbolTable table):
{Token t; BinaryExpression left = null; BinaryExpression right = null;}
{
  //t = <begin> //symbol "{"
  left = Declarations(table) //add the table to know which var will exist within the program
							 //if in the future a variable is used and it doesn't exist in the table => error
  [right = Optional_Statement(table)]
  t = <end> //symbol "}"
  {return new BinaryExpression("program", left, right);}
}

//Rule: <declarations> -> (<declaration>)*
BinaryExpression Declarations(SymbolTable table):
{BinaryExpression left = null; BinaryExpression temp = null;}
{
  (temp = Declaration(table) { 
    if (left == null) {
      left = temp;
    } else {
      left = new BinaryExpression(";", left, temp);
    }
    })*
  
  {return left;}
}

//Rule: <declaration> -> <type> <identifier_list>;
BinaryExpression Declaration(SymbolTable table):
{Token t; BinaryExpression left = null; BinaryExpression right = null;}
{
	t = <type> {left = new BinaryExpression(t.image, null, null);}
	right = Identifier_List(table)
	t = <semicolon> 
  {return new BinaryExpression(":", left, right);}
}

//Rule: <identifier_list> -> <id> (, <id>)*
BinaryExpression Identifier_List(SymbolTable table):
{Token t; BinaryExpression left = null; BinaryExpression right = null;}
{
	t = <identifier> //a variable
	{table.Add(t.image);}
  {left = new BinaryExpression(t.image, null, null);}
	(t = <comma> 
    t = <identifier> {table.Add(t.image);}
   {right = new BinaryExpression(t.image, null, null); left = new BinaryExpression(",", left, right);})*
  {return left;}
}

//Rule: <optional_statements> -> <statement_list>
BinaryExpression Optional_Statement(SymbolTable table):
{BinaryExpression res = null;}
{
  res = Statement_List(table)
  {return res;}
}

//Rule: <statement_list> -> <statement> (<statement>)*
BinaryExpression Statement_List(SymbolTable table):
{Token t; BinaryExpression left = null; BinaryExpression right = null;}
{
  left = Statement(table)
  (right = Statement(table) {left = new BinaryExpression(";", left, right);})* 
  {return left;}
}

//Rule: <statement> -> <variable><assignop><expression>; 
//						| <block>
//						| if (<expression>) <statement> <else_clause>
//						| while (<expression>) <statement>
BinaryExpression Statement(SymbolTable table):
{Token t;}
{
  t = <identifier> {return Statement_Expression(t, table);}
  | t = <keywIf> {return Statement_If(table);}
  | t = <keywLoop> {return Statement_While(table);}
  | t = <begin> {return Block(table);} //if the next token is "{" => a new block
}

//if it reads a variable for the rule <statement>, goes to this function
//Rule: <statement> -> <variable><assignop><expression>;
BinaryExpression Statement_Expression(Token var, SymbolTable table):
{Token t; BinaryExpression left = null; BinaryExpression right = null; String op;}
{
  t = <assignop> {left = new BinaryExpression(var.image, null, null); op = t.image;}
  right = Expression()
  t = <semicolon>
  {table.Add(var.image); return new BinaryExpression(op, left, right);}
}

//if it reads an "if" keyword, goes to this function
//Rule: <statement> -> if (<expression>) <statement> <else_clause>
BinaryExpression Statement_If(SymbolTable table):
{Token t; BinaryExpression left = null; BinaryExpression right = null; BinaryExpression ifTrue = null;}
{
	t = <openparen> 
	left = Expression() //this is the condition
	t = <closeparen> 

	ifTrue = Statement(table) //If the condition is true
	right = Statement_Else(ifTrue, table) //Otherwise
  {return new BinaryExpression("If", left, right);}
}

//An If statement has to be followed with an Else
//Rule: <else_clause> -> (else <statement>)?
BinaryExpression Statement_Else(BinaryExpression ifTrue, SymbolTable table):
{Token t; BinaryExpression left = null; BinaryExpression right = null;}
{
	[t = <keywElse> 
  right = Statement(table)
  {left = ifTrue; return new BinaryExpression("Else", left, right);}]

  //if no else then if the "else" node only contains the statement if "if" is true
  {left = ifTrue; return new BinaryExpression("Else", left, null);} 
}

//if it reads a While keyword, goes to this function
//Rule: <statement> -> while (<expression>) <statement>
BinaryExpression Statement_While(SymbolTable table):
{Token t; BinaryExpression left = null; BinaryExpression right = null;}
{
	t = <openparen> 
	left = Expression() //condition
	t = <closeparen> 
	right = Statement(table) //statement if condition is true
  {return new BinaryExpression("while", left, right);}
}

//Rule: <expression> -> <simple_expression> <relopclause>
BinaryExpression Expression():
{Token t; BinaryExpression left = null; BinaryExpression right = null;}
{
  left = Simple_Expression()
  right = Relop_Clause()
  {if (right == null) 
      return left;
    else
      return new BinaryExpression(right.getOp(), left, right.getExpr());
  }
}

//Rule: <relopclause> -> <relop> <simple_expression> | empty
BinaryExpression Relop_Clause():
{Token t; BinaryExpression expr = null;}
{
	[t = <relop> 
	 expr = Simple_Expression() {return new BinaryExpression(t.image, expr, null);}] 
  {return null;}
}

//Rule: <simple_expression> -> <term> (<addop><term>)*
BinaryExpression Simple_Expression():
{Token t; BinaryExpression left = null; BinaryExpression right = null;}
{ 
  left = Term() 
  (t = <addop> {right = Term(); left = new BinaryExpression(t.image, left, right);})*
  {return left;}
}

//Rule: <term> -> <factor> (<mulop><factor>)*
//It seems like we don't need the option | <addop> <term> as it is considered in 
//simple_expression already
BinaryExpression Term():
{Token t; BinaryExpression left = null; BinaryExpression right = null;}
{
  left = Factor()
  (t = <mulop> {right = Factor(); left = new BinaryExpression(t.image, left, right);})* 
  {return left;}
}

//Rule: <factor> -> <id> | (<expression>) | <num> | !<factor>
BinaryExpression Factor():
{Token t; BinaryExpression temporaryAST = null;}
{
  t = <identifier> {return new BinaryExpression(t.image, null, null);}
  | t = <openparen> {temporaryAST = Expression(); Close_Paren(); return temporaryAST;}
  | t = <num> {return new BinaryExpression(t.image, null, null);}
  | t = <negop> {temporaryAST = Factor(); return new BinaryExpression(t.image, temporaryAST, null);}
}
//This function is to check if a close parenthesis exists after an open parenthesis
//and it is invoked in Factor() in case a token read <openparen>
void Close_Paren():
{Token t;}
{
  t = <closeparen>
}